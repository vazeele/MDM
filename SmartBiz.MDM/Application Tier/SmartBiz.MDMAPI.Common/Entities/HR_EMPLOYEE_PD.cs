//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartBiz.MDMAPI.Common.Entities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Text.RegularExpressions;

    using System.Runtime.Serialization;
    [DataContract(IsReference = true)]
    public partial class HR_EMPLOYEE_PD
    {
        private Nullable<System.DateTime> _EMP_NIC_DATE;
        private Nullable<System.DateTime> _EMP_BIRTHDAY;
        private Nullable<System.DateTime> _EMP_MARRIED_DATE;
        private string _EMP_NIC_NO;
        public HR_EMPLOYEE_PD Clone()
        {
            return this.MemberwiseClone() as HR_EMPLOYEE_PD;
        }
        [DataMember]
        public string EMP_NUMBER { get; set; }
        [DataMember]
        public string EMP_NIC_NO 
        {
            get { return _EMP_NIC_NO; } 
            set
            {
                if (value == null || value == "" | value.Length <= 0)
                {
                    throw new ValidationException("NIC number cannot be empty!");
                }
                else if (value != null)
                {
                    if (!Regex.IsMatch(value, @"^[0-9]{9}[vVxX]$"))
                    {
                        throw new ValidationException("NIC can only contain 9 numbers and a letter!");
                    }
                    _EMP_NIC_NO = value;
                }

            } 
        }
        [DataMember]
        public Nullable<System.DateTime> EMP_BIRTHDAY
        {
            get
            {
                return _EMP_BIRTHDAY;
            }

            set
            {
                if (value != null)
                {
                    if (value.Value.Year < 1940)
                    {
                        throw new ValidationException("Invalid Date!");
                    }
                    else if (EMP_NIC_DATE != null && EMP_NIC_DATE.Value.Year <= value.Value.Year)
                    {
                        throw new ValidationException("Birthday has to be lesser than NIC date");
                    }
                } _EMP_BIRTHDAY = value;
            }
        }

        [DataMember]
        public Nullable<System.DateTime> EMP_NIC_DATE
        {
            get
            {
                return _EMP_NIC_DATE;
            }
            set
            {
                if (value != null)
                {
                    if (value.Value.Year < 1910)
                    {
                        throw new ValidationException("Invalid Date!");
                    }
                    else if (EMP_BIRTHDAY != null && value.Value.Year <= EMP_BIRTHDAY.Value.Year)
                    {
                        throw new ValidationException("NIC date has to be greater than Birthday");
                    }
                } _EMP_NIC_DATE = value;
            }
        }
        [DataMember]
        public string EMP_BIRTHPLACE { get; set; }
        [DataMember]
        public Nullable<short> EMP_GENDER { get; set; }
        [DataMember]
        public string EMP_BLOOD_GROUP { get; set; }
        [DataMember]
        public string NAT_CODE { get; set; }
        [DataMember]
        public string RLG_CODE { get; set; }
        [DataMember]
        public string EMP_MARITAL_STATUS { get; set; }
        [DataMember]
        public Nullable<System.DateTime> EMP_MARRIED_DATE
        {
            get
            {
                return _EMP_MARRIED_DATE;
            }
            set
            {
                if (value != null)
                {
                    if (value.Value.Year < 1970)
                    {
                        throw new ValidationException("Invalid Date!");
                    }
                    else if (EMP_BIRTHDAY != null && value.Value.Year <= EMP_BIRTHDAY.Value.Year)
                    {
                        throw new ValidationException("Married date can't be greater than Birthday!");
                    }
                } _EMP_MARRIED_DATE = value;
            }
        }

        [DataMember]
        public virtual HR_EMPLOYEE HR_EMPLOYEE { get; set; }
        [DataMember]
        public virtual HR_NATIONALITY HR_NATIONALITY { get; set; }
        [DataMember]
        public virtual HR_RELIGION HR_RELIGION { get; set; }
    }
}
